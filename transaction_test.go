package main

import (
	"context"
	"encoding/hex"
	"fmt"
	"log"
	"math/big"
	"strings"
	"sync"
	"testing"
	"time"

	"github.com/btcsuite/btcd/btcec/v2"
	"github.com/btcsuite/btcd/btcec/v2/schnorr"
	"github.com/btcsuite/btcd/btcec/v2/schnorr/musig2"
	"github.com/decred/dcrd/dcrec/secp256k1/v4"
	interfaces "github.com/dominant-strategies/go-quai"
	"github.com/dominant-strategies/go-quai/common"
	"github.com/dominant-strategies/go-quai/common/hexutil"
	"github.com/dominant-strategies/go-quai/core/types"
	"github.com/dominant-strategies/go-quai/crypto"
	"github.com/dominant-strategies/go-quai/params"
	"github.com/dominant-strategies/go-quai/quaiclient/ethclient"
	"github.com/holiman/uint256"
	"golang.org/x/crypto/sha3"
	"google.golang.org/protobuf/proto"
)

var (
	MAXFEE   = big.NewInt(1 * params.GWei)
	BASEFEE  = MAXFEE
	MINERTIP = big.NewInt(1 * params.GWei)
	GAS      = uint64(21000)
	VALUE    = big.NewInt(1)
	// Change the params to the proper chain config
	PARAMS       = params.Blake3PowLocalChainConfig
	wsUrlCyprus2 = "ws://127.0.0.1:8201"
	wsUrl_       = "ws://127.0.0.1:8200"
	qiAddr       = "0x00899DD5871a40E2c67d0645B8DcEb4Dc7974a59"
	qiPrivkey    = "0x383bd2269958a23e0391be01d255316363e2fa22269cbdc48052343346a4dcd8"
	quaiAddr     = "0x000D8BfADBF40241101c430D25151D893c6b16D8"
	quaiPrivkey  = "0x5eec99c44ec18c4b9e7136e259b58fa4879db568ff20245011de1f77af306e72"
)

func TestSchnorrSignature(t *testing.T) {
	client, err := ethclient.Dial(wsUrl_)
	if err != nil {
		t.Fatalf("Failed to connect to the Ethereum WebSocket client: %v", err)
	}
	defer client.Close()
	//fromAddr := common.HexToAddress("0x01b55E4f6D014a3c54F95996C85842326ba37d61")
	privkey := common.FromHex("0x383bd2269958a23e0391be01d255316363e2fa22269cbdc48052343346a4dcd8")
	schnorrPrivKey, schnorrPubKey := btcec.PrivKeyFromBytes(privkey)

	toAddress := common.HexToAddress("0x00999DD5871a40E2c67d0645B8DcEb4Dc7974a59", location)
	outpointHash := common.HexToHash("0x00ac00bbead589f9338f02c5b1f9feabd1c0653aa600e5ef31380f27cdc2701c")
	outpointIndex := uint16(0)
	prevOut := types.OutPoint{outpointHash, outpointIndex}

	in := types.TxIn{
		PreviousOutPoint: prevOut,
		PubKey:           schnorrPubKey.SerializeUncompressed(),
	}

	newOut := types.TxOut{
		Denomination: 6,
		Address:      toAddress.Bytes(),
	}

	qiTx := &types.QiTx{
		ChainID: big.NewInt(1337),
		TxIn:    []types.TxIn{in},
		TxOut:   []types.TxOut{newOut},
	}

	signer := types.LatestSigner(PARAMS)
	txDigestHash := signer.Hash(types.NewTx(qiTx))
	sig, err := schnorr.Sign(schnorrPrivKey, txDigestHash[:])
	if err != nil {
		t.Errorf("Failed to sign transaction: %v", err)
		return
	}
	qiTx.Signature = sig
	fmt.Println("Signature: " + hexutil.Encode(qiTx.Signature.Serialize()))
	if !sig.Verify(txDigestHash[:], schnorrPubKey) {
		t.Error("Failed to verify signature")
		return
	}

	fmt.Println("Signed Raw Transaction")
	fmt.Println("Signature:", common.Bytes2Hex(sig.Serialize()))
	fmt.Println("TX Hash", types.NewTx(qiTx).Hash().String())
	fmt.Println("Pubkey", common.Bytes2Hex(qiTx.TxIn[0].PubKey))

	// Send the transaction
	err = client.SendTransaction(context.Background(), types.NewTx(qiTx))
	if err != nil {
		fmt.Println(err.Error())
		return
	}

}
func TestRecursiveHashing(t *testing.T) {
	now := time.Now()
	result := recursiveHash([]byte("hello"), 1000000)
	fmt.Println("Time taken: ", time.Since(now))
	fmt.Println("Result: ", hex.EncodeToString(result))
}

// recursiveHash performs a SHA3-256 hash on the input data n times recursively.
func recursiveHash(data []byte, n int) []byte {
	if n <= 0 {
		return data
	}
	// Hash the data using SHA3-256
	hash := sha3.Sum256(data)
	// Recursively hash the result
	return recursiveHash(hash[:], n-1)
}

func TestETXSchnorrSignature(t *testing.T) {
	client, err := ethclient.Dial(wsUrl_)
	if err != nil {
		t.Fatalf("Failed to connect to the Ethereum WebSocket client: %v", err)
	}
	defer client.Close()
	//fromAddr := common.HexToAddress("0x00899DD5871a40E2c67d0645B8DcEb4Dc7974a59")
	privkey := common.FromHex(qiPrivkey) //"383bd2269958a23e0391be01d255316363e2fa22269cbdc48052343346a4dcd8")
	schnorrPrivKey, schnorrPubKey := btcec.PrivKeyFromBytes(privkey)
	//0x625c4e3d17bbf9ad748d822b0359c36f52786198b58acd02fe05c207a600a0cdETXIndex:
	toAddress := common.HexToAddress("0x01b55E4f6D014a3c54F95996C85842326ba37d61", location)
	outpointHash := common.HexToHash("0x00e400f809f8bc19d2870a31854511b94d29b2ed96c3e638d454330fd4dcac1f")
	outpointIndex := uint16(0)
	prevOut := types.OutPoint{outpointHash, outpointIndex}

	in := types.TxIn{
		PreviousOutPoint: prevOut,
		PubKey:           schnorrPubKey.SerializeUncompressed(),
	}

	newOut := types.TxOut{
		Denomination: 1,
		Address:      toAddress.Bytes(),
	}

	qiTx := &types.QiTx{
		ChainID: big.NewInt(1337),
		TxIn:    []types.TxIn{in},
		TxOut:   []types.TxOut{newOut},
	}
	signer := types.LatestSigner(PARAMS)
	txDigestHash := signer.Hash(types.NewTx(qiTx))
	sig, err := schnorr.Sign(schnorrPrivKey, txDigestHash[:])
	if err != nil {
		t.Errorf("Failed to sign transaction: %v", err)
		return
	}
	qiTx.Signature = sig
	fmt.Println("Signature: " + hexutil.Encode(qiTx.Signature.Serialize()))
	if !sig.Verify(txDigestHash[:], schnorrPubKey) {
		t.Error("Failed to verify signature")
		return
	}

	fmt.Println("Signed Raw Transaction")
	fmt.Println("Signature:", common.Bytes2Hex(sig.Serialize()))
	fmt.Println("TX Digest Hash", txDigestHash.String())
	fmt.Println("Pubkey", common.Bytes2Hex(qiTx.TxIn[0].PubKey))
	fmt.Println("Tx hash: ", types.NewTx(qiTx).Hash().String())
	// Send the transaction
	err = client.SendTransaction(context.Background(), types.NewTx(qiTx))
	if err != nil {
		fmt.Println(err.Error())
		return
	}

}

func TestQiConversion(t *testing.T) {
	client, err := ethclient.Dial(wsUrl_)
	if err != nil {
		t.Fatalf("Failed to connect to the Ethereum WebSocket client: %v", err)
	}
	defer client.Close()
	//fromAddr := common.HexToAddress("0x00899DD5871a40E2c67d0645B8DcEb4Dc7974a59")
	privkey := common.FromHex(qiPrivkey) //"383bd2269958a23e0391be01d255316363e2fa22269cbdc48052343346a4dcd8")
	schnorrPrivKey, schnorrPubKey := btcec.PrivKeyFromBytes(privkey)
	//0x625c4e3d17bbf9ad748d822b0359c36f52786198b58acd02fe05c207a600a0cdETXIndex:
	toAddress := common.HexToAddress(quaiAddr, location)
	outpointHash := common.HexToHash("0x008a008957f340a55c02b486d897cc03ac5ac88b127611cda44cd3660d53df5b")
	outpointIndex := uint16(0)
	prevOut := types.OutPoint{outpointHash, outpointIndex}

	in := types.TxIn{
		PreviousOutPoint: prevOut,
		PubKey:           schnorrPubKey.SerializeUncompressed(),
	}

	newOut := types.TxOut{
		Denomination: 6,
		Address:      toAddress.Bytes(),
	}
	newOut2 := types.TxOut{
		Denomination: 5,
		Address:      toAddress.Bytes(),
	}

	qiTx := &types.QiTx{
		ChainID: big.NewInt(1337),
		TxIn:    []types.TxIn{in},
		TxOut:   []types.TxOut{newOut, newOut2},
	}
	signer := types.LatestSigner(PARAMS)
	txDigestHash := signer.Hash(types.NewTx(qiTx))
	sig, err := schnorr.Sign(schnorrPrivKey, txDigestHash[:])
	if err != nil {
		t.Errorf("Failed to sign transaction: %v", err)
		return
	}
	qiTx.Signature = sig
	fmt.Println("Signature: " + hexutil.Encode(qiTx.Signature.Serialize()))
	if !sig.Verify(txDigestHash[:], schnorrPubKey) {
		t.Error("Failed to verify signature")
		return
	}

	fmt.Println("Signed Raw Transaction")
	fmt.Println("Signature:", common.Bytes2Hex(sig.Serialize()))
	fmt.Println("TX Digest Hash", txDigestHash.String())
	fmt.Println("Pubkey", common.Bytes2Hex(qiTx.TxIn[0].PubKey))

	// Send the transaction
	err = client.SendTransaction(context.Background(), types.NewTx(qiTx))
	if err != nil {
		fmt.Println(err.Error())
		return
	}

}

func TestRedeemQuai(t *testing.T) {
	client, err := ethclient.Dial(wsUrl_)
	if err != nil {
		t.Fatalf("Failed to connect to the Ethereum WebSocket client: %v", err)
	}
	defer client.Close()
	fromAddress := common.HexToAddress(quaiAddr, location)
	privKey, err := crypto.ToECDSA(common.FromHex(quaiPrivkey))
	if err != nil {
		t.Fatalf("Failed to convert private key to ECDSA: %v", err)
	}
	from := crypto.PubkeyToAddress(privKey.PublicKey, location)
	if !from.Equal(fromAddress) {
		t.Fatalf("Failed to convert public key to address: %v", err)
	}
	toAddr := common.HexToAddress(fmt.Sprintf("0x%x0000000000000000000000000000000000000A", location.BytePrefix()), location)
	fmt.Println("To Address: ", toAddr.String())
	signer := types.LatestSigner(PARAMS)
	nonce, err := client.PendingNonceAt(context.Background(), from.MixedcaseAddress())
	if err != nil {
		t.Error(err.Error())
		t.Fail()
	}
	// Check balance
	balance, err := client.BalanceAt(context.Background(), fromAddress.MixedcaseAddress(), nil)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	fmt.Println("Balance: ", balance)
	fmt.Println("Nonce: ", nonce)
	inner_tx := types.QuaiTx{ChainID: PARAMS.ChainID, Nonce: nonce, GasTipCap: MINERTIP, GasFeeCap: BASEFEE, Gas: GAS * 10, To: &toAddr, Value: common.Big0, Data: nil, AccessList: types.AccessList{}}

	tx := types.NewTx(&inner_tx)
	tx, err = types.SignTx(tx, signer, privKey)
	if err != nil {
		t.Error(err.Error())
		t.Fail()
		return
	}

	err = client.SendTransaction(context.Background(), tx)
	if err != nil {
		t.Error(err.Error())
		t.Fail()
		return
	}
	tx, isPending, err := client.TransactionByHash(context.Background(), tx.Hash(location...))
	fmt.Printf("tx: %+v isPending: %v err: %v\n", tx, isPending, err)
	receipt, err := client.TransactionReceipt(context.Background(), tx.Hash())
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	fmt.Printf("Receipt: %+v\n", receipt)
	nonce, err = client.PendingNonceAt(context.Background(), from.MixedcaseAddress())
	if err != nil {
		t.Error(err.Error())
		t.Fail()
	}
	// Check balance
	balance, err = client.BalanceAt(context.Background(), fromAddress.MixedcaseAddress(), nil)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	fmt.Println("Balance: ", balance)
	fmt.Println("Nonce: ", nonce)
}

func TestQuaiConversion(t *testing.T) {
	fromAddress := common.HexToAddress(quaiAddr, location)
	privKey, err := crypto.ToECDSA(common.FromHex(quaiPrivkey))
	if err != nil {
		t.Fatalf("Failed to convert private key to ECDSA: %v", err)
	}
	from := crypto.PubkeyToAddress(privKey.PublicKey, location)
	if !from.Equal(fromAddress) {
		t.Fatalf("Failed to convert public key to address: %v", err)
	}
	toAddress := common.HexToAddress("0x00e8c50233D309e5e63805D6d7AE10e6EDE83c65", location)
	toPrivKey, err := crypto.ToECDSA(common.FromHex("0x2f156531b49753994351ae3cb446264993dcdb21276558ff9f4126d6129ea21c"))
	if err != nil {
		t.Fatalf("Failed to convert private key to ECDSA: %v", err)
	}
	to := crypto.PubkeyToAddress(toPrivKey.PublicKey, location)
	if !to.Equal(toAddress) {
		t.Fatalf("Failed to convert public key to address: %v", err)
	}
	signer := types.LatestSigner(PARAMS)

	client, err := ethclient.Dial(wsUrl_)
	if err != nil {
		t.Fatalf("Failed to connect to the Ethereum WebSocket client: %v", err)
	}
	defer client.Close()

	nonce, err := client.PendingNonceAt(context.Background(), from.MixedcaseAddress())
	if err != nil {
		t.Error(err.Error())
		t.Fail()
	}
	// Check balance
	balance, err := client.BalanceAt(context.Background(), fromAddress.MixedcaseAddress(), nil)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	fmt.Println("Balance: ", balance)
	fmt.Println("Nonce: ", nonce)

	inner_tx := types.QuaiTx{ChainID: PARAMS.ChainID, Nonce: nonce, GasTipCap: MINERTIP, GasFeeCap: BASEFEE, Gas: GAS * 10, To: &to, Value: big.NewInt(params.Ether), Data: nil, AccessList: types.AccessList{}}
	tx := types.NewTx(&inner_tx)
	tx, err = types.SignTx(tx, signer, privKey)
	if err != nil {
		t.Error(err.Error())
		t.Fail()
		return
	}

	err = client.SendTransaction(context.Background(), tx)
	if err != nil {
		t.Error(err.Error())
		t.Fail()
		return
	}
	time.Sleep(60 * time.Second)
	tx, isPending, err := client.TransactionByHash(context.Background(), tx.Hash(location...))
	fmt.Printf("tx: %+v isPending: %v err: %v\n", tx, isPending, err)
	receipt, err := client.TransactionReceipt(context.Background(), tx.Hash())
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	fmt.Printf("Receipt: %+v\n", receipt)

	etx := receipt.Etxs[0]
	tx, isPending, err = client.TransactionByHash(context.Background(), etx.Hash())
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	fmt.Printf("etx: %+v isPending: %v err: %v\n", tx, isPending, err)
	receipt, err = client.TransactionReceipt(context.Background(), etx.Hash())
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	fmt.Printf("ETX Receipt: %+v\n", receipt)
}

func TestETX(t *testing.T) {
	fromAddress := common.HexToAddress("0x000D8BfADBF40241101c430D25151D893c6b16D8", location)
	privKey, err := crypto.ToECDSA(common.FromHex(quaiPrivkey))
	if err != nil {
		t.Fatalf("Failed to convert private key to ECDSA: %v", err)
	}
	from := crypto.PubkeyToAddress(privKey.PublicKey, location)
	if !from.Equal(fromAddress) {
		t.Fatalf("Failed to convert public key to address: %v", err)
	}

	toAddress := common.HexToAddress("0x0109E949aF137F98bb6AF72102b9fE5C3d7e17cc", location)
	toPrivKey, err := crypto.ToECDSA(common.FromHex("0x090fb448d46419ff13b6ee340f480623fd63e208b7bee788e79f35c63e428c3f"))
	if err != nil {
		t.Fatalf("Failed to convert private key to ECDSA: %v", err)
	}
	to := crypto.PubkeyToAddress(toPrivKey.PublicKey, location)
	if !to.Equal(toAddress) {
		t.Fatalf("Failed to convert public key to address: %v", err)
	}

	signer := types.LatestSigner(PARAMS)

	client, err := ethclient.Dial(wsUrl_)
	if err != nil {
		t.Fatalf("Failed to connect to the Ethereum WebSocket client: %v", err)
	}
	defer client.Close()
	cyprus2Client, err := ethclient.Dial(wsUrlCyprus2)
	if err != nil {
		t.Fatalf("Failed to connect to the Ethereum WebSocket client: %v", err)
	}
	defer cyprus2Client.Close()
	nonce, err := client.PendingNonceAt(context.Background(), from.MixedcaseAddress())
	if err != nil {
		t.Error(err.Error())
		t.Fail()
	}
	// Check balance
	balance, err := client.BalanceAt(context.Background(), fromAddress.MixedcaseAddress(), nil)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	fmt.Println("Balance: ", balance)
	fmt.Println("Nonce: ", nonce)

	inner_tx := types.QuaiTx{ChainID: PARAMS.ChainID, Nonce: nonce, GasTipCap: MINERTIP, GasFeeCap: BASEFEE, Gas: GAS * 3, To: &to, Value: VALUE, Data: nil, AccessList: types.AccessList{}}
	tx := types.NewTx(&inner_tx)

	tx, err = types.SignTx(tx, signer, privKey)
	if err != nil {
		t.Error(err.Error())
		t.Fail()
		return
	}

	err = client.SendTransaction(context.Background(), tx)
	if err != nil {
		t.Error(err.Error())
		t.Fail()
		return
	}

	tx, isPending, err := client.TransactionByHash(context.Background(), tx.Hash(location...))
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	fmt.Printf("tx: %+v isPending: %v err: %v\n", tx, isPending, err)
	receipt, err := client.TransactionReceipt(context.Background(), tx.Hash())
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	fmt.Printf("Receipt: %+v\n", receipt)

	etx := receipt.Etxs[0]
	tx, isPending, err = cyprus2Client.TransactionByHash(context.Background(), etx.Hash())
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	fmt.Printf("etx: %+v isPending: %v err: %v\n", tx, isPending, err)
	receipt, err = cyprus2Client.TransactionReceipt(context.Background(), etx.Hash())
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	fmt.Printf("ETX Receipt: %+v\n", receipt)
	balance2, err := cyprus2Client.BalanceAt(context.Background(), toAddress.MixedcaseAddress(), nil)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	fmt.Println("Balance2: ", balance2)

}

func TestETXs(t *testing.T) {
	client, err := ethclient.Dial(wsUrl_)
	if err != nil {
		t.Fatalf("Failed to connect to the Ethereum WebSocket client: %v", err)
	}
	defer client.Close()

	for i := 0; i < 1000; i++ {
		fromAddress := common.HexToAddress("0x000D8BfADBF40241101c430D25151D893c6b16D8", location)
		privKey, err := crypto.ToECDSA(common.FromHex(quaiPrivkey))
		if err != nil {
			t.Fatalf("Failed to convert private key to ECDSA: %v", err)
		}
		from := crypto.PubkeyToAddress(privKey.PublicKey, location)
		if !from.Equal(fromAddress) {
			t.Fatalf("Failed to convert public key to address: %v", err)
		}

		toAddress := common.HexToAddress("0x1109E949aF137F98bb6AF72102b9fE5C3d7e17cc", location)
		signer := types.LatestSigner(PARAMS)

		nonce, err := client.PendingNonceAt(context.Background(), from.MixedcaseAddress())
		if err != nil {
			t.Error(err.Error())
			t.Fail()
		}
		// Check balance
		balance, err := client.BalanceAt(context.Background(), fromAddress.MixedcaseAddress(), nil)
		if err != nil {
			fmt.Println(err.Error())
			return
		}
		fmt.Println("Balance: ", balance)
		fmt.Println("Nonce: ", nonce)

		inner_tx := types.QuaiTx{ChainID: PARAMS.ChainID, Nonce: nonce, GasTipCap: MINERTIP, GasFeeCap: BASEFEE, Gas: GAS * 3, To: &toAddress, Value: VALUE, Data: nil, AccessList: types.AccessList{}}
		tx := types.NewTx(&inner_tx)

		tx, err = types.SignTx(tx, signer, privKey)
		if err != nil {
			t.Error(err.Error())
			t.Fail()
			return
		}

		err = client.SendTransaction(context.Background(), tx)
		if err != nil {
			if strings.Contains(err.Error(), "already known") || strings.Contains(err.Error(), "nonce too low") {
				t.Log("Sent TX ", i)
				time.Sleep(1 * time.Second)
				continue
			}
			t.Error(err.Error())
			t.Fail()
			return
		}
		t.Log("Sent TX ", i)
		time.Sleep(500 * time.Millisecond)
	}
}

// ERC20X.sol Contract bytecode
var binary = "60806040523480156200001157600080fd5b506040518060400160405280601681526020017f517561692043726f73732d436861696e20546f6b656e00000000000000000000815250600f908162000058919062000970565b506040518060400160405280600381526020017f5158430000000000000000000000000000000000000000000000000000000000815250601090816200009f919062000970565b5033601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550683635c9adc5dea00000600e8190555062000127601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600e546200057f60201b60201c565b6040518060400160405280600060ff168152602001601d60ff1681525060126000600d81106200015c576200015b62000a57565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff1602179055509050506040518060400160405280601e60ff168152602001603a60ff1681525060126001600d8110620001d757620001d662000a57565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff1602179055509050506040518060400160405280603b60ff168152602001605760ff1681525060126002600d811062000252576200025162000a57565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff1602179055509050506040518060400160405280605860ff168152602001607360ff1681525060126003600d8110620002cd57620002cc62000a57565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff1602179055509050506040518060400160405280607460ff168152602001608f60ff1681525060126004600d811062000348576200034762000a57565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff1602179055509050506040518060400160405280609060ff16815260200160ab60ff1681525060126005600d8110620003c357620003c262000a57565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff160217905550905050604051806040016040528060ac60ff16815260200160c760ff1681525060126006600d81106200043e576200043d62000a57565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff160217905550905050604051806040016040528060c860ff16815260200160e360ff1681525060126007600d8110620004b957620004b862000a57565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff160217905550905050604051806040016040528060e460ff16815260200160ff801681525060126008600d811062000533576200053262000a57565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555090505062000ba1565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620005f1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005e89062000ae7565b60405180910390fd5b6200060560008383620006ec60201b60201c565b80600e600082825462000619919062000b38565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620006cc919062000b84565b60405180910390a3620006e860008383620006f160201b60201c565b5050565b505050565b505050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200077857607f821691505b6020821081036200078e576200078d62000730565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620007f87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620007b9565b620008048683620007b9565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620008516200084b62000845846200081c565b62000826565b6200081c565b9050919050565b6000819050919050565b6200086d8362000830565b620008856200087c8262000858565b848454620007c6565b825550505050565b600090565b6200089c6200088d565b620008a981848462000862565b505050565b5b81811015620008d157620008c560008262000892565b600181019050620008af565b5050565b601f8211156200092057620008ea8162000794565b620008f584620007a9565b8101602085101562000905578190505b6200091d6200091485620007a9565b830182620008ae565b50505b505050565b600082821c905092915050565b6000620009456000198460080262000925565b1980831691505092915050565b600062000960838362000932565b9150826002028217905092915050565b6200097b82620006f6565b67ffffffffffffffff81111562000997576200099662000701565b5b620009a382546200075f565b620009b0828285620008d5565b600060209050601f831160018114620009e85760008415620009d3578287015190505b620009df858262000952565b86555062000a4f565b601f198416620009f88662000794565b60005b8281101562000a2257848901518255600182019150602085019450602081019050620009fb565b8683101562000a42578489015162000a3e601f89168262000932565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b600062000acf601f8362000a86565b915062000adc8262000a97565b602082019050919050565b6000602082019050818103600083015262000b028162000ac0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000b45826200081c565b915062000b52836200081c565b925082820190508082111562000b6d5762000b6c62000b09565b5b92915050565b62000b7e816200081c565b82525050565b600060208201905062000b9b600083018462000b73565b92915050565b612c2b8062000bb16000396000f3fe6080604052600436106101095760003560e01c8063593b79fe11610095578063a457c2d711610064578063a457c2d7146103ab578063a9059cbb146103e8578063bc472aa314610418578063dd62ed3e14610455578063e20e50ba1461049257610109565b8063593b79fe146102ea57806370a082311461032757806373cddab21461036457806395d89b411461038057610109565b806323b872dd116100dc57806323b872dd146101ca578063313ce567146102075780633950935114610232578063399444bc1461026f578063429437bf146102ac57610109565b806306fdde031461010e578063095ea7b31461013957806318160ddd1461017657806320e8dd93146101a1575b600080fd5b34801561011a57600080fd5b506101236104bb565b604051610130919061197c565b60405180910390f35b34801561014557600080fd5b50610160600480360381019061015b9190611a37565b61054d565b60405161016d9190611a92565b60405180910390f35b34801561018257600080fd5b5061018b610564565b6040516101989190611abc565b60405180910390f35b3480156101ad57600080fd5b506101c860048036038101906101c39190611a37565b61056e565b005b3480156101d657600080fd5b506101f160048036038101906101ec9190611ad7565b61066c565b6040516101fe9190611a92565b60405180910390f35b34801561021357600080fd5b5061021c61068f565b6040516102299190611b46565b60405180910390f35b34801561023e57600080fd5b5061025960048036038101906102549190611a37565b610698565b6040516102669190611a92565b60405180910390f35b34801561027b57600080fd5b5061029660048036038101906102919190611b61565b6106c8565b6040516102a39190611b46565b60405180910390f35b3480156102b857600080fd5b506102d360048036038101906102ce9190611b8e565b6107d5565b6040516102e1929190611bbb565b60405180910390f35b3480156102f657600080fd5b50610311600480360381019061030c9190611b61565b610816565b60405161031e9190611c39565b60405180910390f35b34801561033357600080fd5b5061034e60048036038101906103499190611b61565b61083f565b60405161035b9190611abc565b60405180910390f35b61037e60048036038101906103799190611c5b565b610887565b005b34801561038c57600080fd5b50610395610b30565b6040516103a2919061197c565b60405180910390f35b3480156103b757600080fd5b506103d260048036038101906103cd9190611a37565b610bc2565b6040516103df9190611a92565b60405180910390f35b61040260048036038101906103fd9190611a37565b610c32565b60405161040f9190611a92565b60405180910390f35b34801561042457600080fd5b5061043f600480360381019061043a9190611b8e565b610c8f565b60405161044c9190611ce5565b60405180910390f35b34801561046157600080fd5b5061047c60048036038101906104779190611d00565b610cc5565b6040516104899190611abc565b60405180910390f35b34801561049e57600080fd5b506104b960048036038101906104b49190611d6c565b610d4c565b005b6060600f80546104ca90611ddb565b80601f01602080910402602001604051908101604052809291908181526020018280546104f690611ddb565b80156105435780601f1061051857610100808354040283529160200191610543565b820191906000526020600020905b81548152906001019060200180831161052657829003601f168201915b5050505050905090565b600061055a338484610f6c565b6001905092915050565b6000600e54905090565b3373ffffffffffffffffffffffffffffffffffffffff166002610590336106c8565b60ff16600c81106105a4576105a3611e0c565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614336040516020016105ee9190611e83565b60405160208183030381529060405260405160200161060d9190611f7d565b6040516020818303038152906040529061065d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610654919061197c565b60405180910390fd5b506106688282611135565b5050565b600061067984338461128b565b610684848484611317565b600190509392505050565b60006012905090565b6000803390506106bd8185856106ae8589610cc5565b6106b89190611fd9565b610f6c565b600191505092915050565b6000806106d483610816565b6000815181106106e7576106e6611e0c565b5b602001015160f81c60f81b60f81c905060005b60098160ff1610156107945760128160ff16600d811061071d5761071c611e0c565b5b0160000160009054906101000a900460ff1660ff168260ff1610158015610772575060128160ff16600d811061075657610755611e0c565b5b0160000160019054906101000a900460ff1660ff168260ff1611155b156107815780925050506107d0565b808061078c9061200d565b9150506106fa565b506040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c790612082565b60405180910390fd5b919050565b601281600d81106107e557600080fd5b016000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16905082565b6060816040516020016108299190611e83565b6040516020818303038152906040529050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600085f7905080156108ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c5906120ee565b60405180910390fd5b6108d8338661158d565b600060026108e5886106c8565b60ff16600c81106108f9576108f8611e0c565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361098c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098390612180565b60405180910390fd5b600085858561099b9190611fd9565b6109a591906121a0565b9050803410156109b48261175a565b6040516020016109c491906122d1565b60405160208183030381529060405290610a14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0b919061197c565b60405180910390fd5b5060008888604051602401610a2a9291906122fe565b6040516020818303038152906040527f20e8dd93000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000806000835160208501898b8d60008b6000f690508973ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fcf0ee562475620bbcd2f1b0675c8163317513271e4fdbbe9722436f247bd6d998b604051610b1c9190611abc565b60405180910390a350505050505050505050565b606060108054610b3f90611ddb565b80601f0160208091040260200160405190810160405280929190818152602001828054610b6b90611ddb565b8015610bb85780601f10610b8d57610100808354040283529160200191610bb8565b820191906000526020600020905b815481529060010190602001808311610b9b57829003601f168201915b5050505050905090565b6000803390506000610bd48286610cc5565b905083811015610c19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1090612399565b60405180910390fd5b610c268286868403610f6c565b60019250505092915050565b60008083f7905080610c79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c709061242b565b60405180910390fd5b610c84338585611317565b600191505092915050565b600281600c8110610c9f57600080fd5b016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600081f790508015610d93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8a906120ee565b60405180910390fd5b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1a90612497565b60405180910390fd5b60098360ff1610610e69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6090612503565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660028460ff16600c8110610e9857610e97611e0c565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610f10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0790612595565b60405180910390fd5b8160028460ff16600c8110610f2857610f27611e0c565b5b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610fdb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd290612627565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361104a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611041906126b9565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516111289190611abc565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036111a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119b90612725565b60405180910390fd5b6111b0600083836118e2565b80600e60008282546111c29190611fd9565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516112739190611abc565b60405180910390a3611287600083836118e7565b5050565b60006112978484610cc5565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146113115781811015611303576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112fa90612791565b60405180910390fd5b6113108484848403610f6c565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611386576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137d90612823565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036113f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ec906128b5565b60405180910390fd5b6114008383836118e2565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611486576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147d90612947565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516115749190611abc565b60405180910390a36115878484846118e7565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036115fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f3906129d9565b60405180910390fd5b611608826000836118e2565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561168e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168590612a6b565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600e60008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516117419190611abc565b60405180910390a3611755836000846118e7565b505050565b6060600082036117a1576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506118dd565b600082905060005b600082146117d35780806117bc90612a8b565b915050600a826117cc9190612b02565b91506117a9565b60008167ffffffffffffffff8111156117ef576117ee612b33565b5b6040519080825280601f01601f1916602001820160405280156118215781602001600182028036833780820191505090505b50905060008290505b600086146118d55760018161183f9190612b62565b90506000600a80886118519190612b02565b61185b91906121a0565b876118669190612b62565b60306118729190612b96565b905060008160f81b9050808484815181106118905761188f611e0c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a886118cc9190612b02565b9750505061182a565b819450505050505b919050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561192657808201518184015260208101905061190b565b60008484015250505050565b6000601f19601f8301169050919050565b600061194e826118ec565b61195881856118f7565b9350611968818560208601611908565b61197181611932565b840191505092915050565b600060208201905081810360008301526119968184611943565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006119ce826119a3565b9050919050565b6119de816119c3565b81146119e957600080fd5b50565b6000813590506119fb816119d5565b92915050565b6000819050919050565b611a1481611a01565b8114611a1f57600080fd5b50565b600081359050611a3181611a0b565b92915050565b60008060408385031215611a4e57611a4d61199e565b5b6000611a5c858286016119ec565b9250506020611a6d85828601611a22565b9150509250929050565b60008115159050919050565b611a8c81611a77565b82525050565b6000602082019050611aa76000830184611a83565b92915050565b611ab681611a01565b82525050565b6000602082019050611ad16000830184611aad565b92915050565b600080600060608486031215611af057611aef61199e565b5b6000611afe868287016119ec565b9350506020611b0f868287016119ec565b9250506040611b2086828701611a22565b9150509250925092565b600060ff82169050919050565b611b4081611b2a565b82525050565b6000602082019050611b5b6000830184611b37565b92915050565b600060208284031215611b7757611b7661199e565b5b6000611b85848285016119ec565b91505092915050565b600060208284031215611ba457611ba361199e565b5b6000611bb284828501611a22565b91505092915050565b6000604082019050611bd06000830185611b37565b611bdd6020830184611b37565b9392505050565b600081519050919050565b600082825260208201905092915050565b6000611c0b82611be4565b611c158185611bef565b9350611c25818560208601611908565b611c2e81611932565b840191505092915050565b60006020820190508181036000830152611c538184611c00565b905092915050565b600080600080600060a08688031215611c7757611c7661199e565b5b6000611c85888289016119ec565b9550506020611c9688828901611a22565b9450506040611ca788828901611a22565b9350506060611cb888828901611a22565b9250506080611cc988828901611a22565b9150509295509295909350565b611cdf816119c3565b82525050565b6000602082019050611cfa6000830184611cd6565b92915050565b60008060408385031215611d1757611d1661199e565b5b6000611d25858286016119ec565b9250506020611d36858286016119ec565b9150509250929050565b611d4981611b2a565b8114611d5457600080fd5b50565b600081359050611d6681611d40565b92915050565b60008060408385031215611d8357611d8261199e565b5b6000611d9185828601611d57565b9250506020611da2858286016119ec565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611df357607f821691505b602082108103611e0657611e05611dac565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008160601b9050919050565b6000611e5382611e3b565b9050919050565b6000611e6582611e48565b9050919050565b611e7d611e78826119c3565b611e5a565b82525050565b6000611e8f8284611e6c565b60148201915081905092915050565b600081905092915050565b7f53656e6465722000000000000000000000000000000000000000000000000000600082015250565b6000611edf600783611e9e565b9150611eea82611ea9565b600782019050919050565b600081905092915050565b6000611f0b82611be4565b611f158185611ef5565b9350611f25818560208601611908565b80840191505092915050565b7f206e6f7420617070726f76656400000000000000000000000000000000000000600082015250565b6000611f67600d83611e9e565b9150611f7282611f31565b600d82019050919050565b6000611f8882611ed2565b9150611f948284611f00565b9150611f9f82611f5a565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611fe482611a01565b9150611fef83611a01565b925082820190508082111561200757612006611faa565b5b92915050565b600061201882611b2a565b915060ff820361202b5761202a611faa565b5b600182019050919050565b7f496e76616c6964204c6f636174696f6e00000000000000000000000000000000600082015250565b600061206c6010836118f7565b915061207782612036565b602082019050919050565b6000602082019050818103600083015261209b8161205f565b9050919050565b7f41646472657373206973206e6f742065787465726e616c000000000000000000600082015250565b60006120d86017836118f7565b91506120e3826120a2565b602082019050919050565b60006020820190508181036000830152612107816120cb565b9050919050565b7f546f6b656e206973206e6f7420617661696c61626c65206f6e2074686520646560008201527f7374696e6174696f6e20636861696e0000000000000000000000000000000000602082015250565b600061216a602f836118f7565b91506121758261210e565b604082019050919050565b600060208201905081810360008301526121998161215d565b9050919050565b60006121ab82611a01565b91506121b683611a01565b92508282026121c481611a01565b915082820484148315176121db576121da611faa565b5b5092915050565b7f4e6f7420656e6f756768206761732073656e742c206e656564206174206c656160008201527f7374200000000000000000000000000000000000000000000000000000000000602082015250565b600061223e602383611e9e565b9150612249826121e2565b602382019050919050565b600061225f826118ec565b6122698185611e9e565b9350612279818560208601611908565b80840191505092915050565b7f2077656900000000000000000000000000000000000000000000000000000000600082015250565b60006122bb600483611e9e565b91506122c682612285565b600482019050919050565b60006122dc82612231565b91506122e88284612254565b91506122f3826122ae565b915081905092915050565b60006040820190506123136000830185611cd6565b6123206020830184611aad565b9392505050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b60006123836025836118f7565b915061238e82612327565b604082019050919050565b600060208201905081810360008301526123b281612376565b9050919050565b7f416464726573732069732065787465726e616c2e205573652063726f73732d6360008201527f6861696e207472616e736665722066756e6374696f6e2e000000000000000000602082015250565b60006124156037836118f7565b9150612420826123b9565b604082019050919050565b6000602082019050818103600083015261244481612408565b9050919050565b7f53656e646572206973206e6f74206465706c6f79657200000000000000000000600082015250565b60006124816016836118f7565b915061248c8261244b565b602082019050919050565b600060208201905081810360008301526124b081612474565b9050919050565b7f4d61782039207a6f6e6573000000000000000000000000000000000000000000600082015250565b60006124ed600b836118f7565b91506124f8826124b7565b602082019050919050565b6000602082019050818103600083015261251c816124e0565b9050919050565b7f54686520617070726f766564206164647265737320666f722074686973207a6f60008201527f6e6520616c726561647920657869737473000000000000000000000000000000602082015250565b600061257f6031836118f7565b915061258a82612523565b604082019050919050565b600060208201905081810360008301526125ae81612572565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006126116024836118f7565b915061261c826125b5565b604082019050919050565b6000602082019050818103600083015261264081612604565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006126a36022836118f7565b91506126ae82612647565b604082019050919050565b600060208201905081810360008301526126d281612696565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b600061270f601f836118f7565b915061271a826126d9565b602082019050919050565b6000602082019050818103600083015261273e81612702565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b600061277b601d836118f7565b915061278682612745565b602082019050919050565b600060208201905081810360008301526127aa8161276e565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061280d6025836118f7565b9150612818826127b1565b604082019050919050565b6000602082019050818103600083015261283c81612800565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b600061289f6023836118f7565b91506128aa82612843565b604082019050919050565b600060208201905081810360008301526128ce81612892565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006129316026836118f7565b915061293c826128d5565b604082019050919050565b6000602082019050818103600083015261296081612924565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006129c36021836118f7565b91506129ce82612967565b604082019050919050565b600060208201905081810360008301526129f2816129b6565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000612a556022836118f7565b9150612a60826129f9565b604082019050919050565b60006020820190508181036000830152612a8481612a48565b9050919050565b6000612a9682611a01565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612ac857612ac7611faa565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612b0d82611a01565b9150612b1883611a01565b925082612b2857612b27612ad3565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000612b6d82611a01565b9150612b7883611a01565b9250828203905081811115612b9057612b8f611faa565b5b92915050565b6000612ba182611b2a565b9150612bac83611b2a565b9250828201905060ff811115612bc557612bc4611faa565b5b9291505056fea2646970667358221220ab6a75e621933d75fcdb9dabdd7f9d2f85f1e994467ae8097a6ea39b07286ca864736f6c63782c302e382e31382d646576656c6f702e323032322e31312e382b636f6d6d69742e36306161353861362e6d6f64005d"

var sha = "60806040523480156200001157600080fd5b5060405162001f7238038062001f72833981016040819052620000349162000325565b600f62000042848262000426565b50601062000051838262000426565b50601180546001600160a01b03191633908117909155819062000075908262000195565b505060408051808201825260008152601d60209182015260128054611d0061ffff199182161790915582518084018452601e8152603a90830152601380548216613a1e17905582518084018452603b815260579083015260148054821661573b17905582518084018452605881526073908301526015805482166173581790558251808401845260748152608f90830152601680548216618f74179055825180840184526090815260ab9083015260178054821661ab901790558251808401845260ac815260c79083015260188054821661c7ac1790558251808401845260c8815260e39083015260198054821661e3c8179055825180840190935260e4835260ff9290910191909152601a805490911661ffe4179055506200051a9050565b6001600160a01b038216620001f05760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b80600e6000828254620002049190620004f2565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200028857600080fd5b81516001600160401b0380821115620002a557620002a562000260565b604051601f8301601f19908116603f01168101908282118183101715620002d057620002d062000260565b81604052838152602092508683858801011115620002ed57600080fd5b600091505b83821015620003115785820183015181830184015290820190620002f2565b600093810190920192909252949350505050565b6000806000606084860312156200033b57600080fd5b83516001600160401b03808211156200035357600080fd5b620003618783880162000276565b945060208601519150808211156200037857600080fd5b50620003878682870162000276565b925050604084015190509250925092565b600181811c90821680620003ad57607f821691505b602082108103620003ce57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200025b57600081815260208120601f850160051c81016020861015620003fd5750805b601f850160051c820191505b818110156200041e5782815560010162000409565b505050505050565b81516001600160401b0381111562000442576200044262000260565b6200045a8162000453845462000398565b84620003d4565b602080601f831160018114620004925760008415620004795750858301515b600019600386901b1c1916600185901b1785556200041e565b600085815260208120601f198616915b82811015620004c357888601518255948401946001909101908401620004a2565b5085821015620004e25787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808201808211156200051457634e487b7160e01b600052601160045260246000fd5b92915050565b611a48806200052a6000396000f3fe6080604052600436106101295760003560e01c8063593b79fe116100a5578063a457c2d711610074578063a9059cbb11610059578063a9059cbb14610375578063bc472aa314610395578063dd62ed3e146103cd57600080fd5b8063a457c2d714610335578063a534d9de1461035557600080fd5b8063593b79fe1461028657806370a08231146102d757806373cddab21461030d57806395d89b411461032057600080fd5b806323b872dd116100fc57806339509351116100e1578063395093511461020c578063399444bc1461022c578063429437bf1461024c57600080fd5b806323b872dd146101ca578063313ce567146101ea57600080fd5b806306fdde031461012e578063095ea7b31461015957806318160ddd1461018957806320e8dd93146101a8575b600080fd5b34801561013a57600080fd5b50610143610413565b60405161015091906115a8565b60405180910390f35b34801561016557600080fd5b506101796101743660046115de565b6104a5565b6040519015158152602001610150565b34801561019557600080fd5b50600e545b604051908152602001610150565b3480156101b457600080fd5b506101c86101c33660046115de565b6104bc565b005b3480156101d657600080fd5b506101796101e5366004611608565b61056d565b3480156101f657600080fd5b5060125b60405160ff9091168152602001610150565b34801561021857600080fd5b506101796102273660046115de565b61058f565b34801561023857600080fd5b506101fa610247366004611644565b6105ce565b34801561025857600080fd5b5061026c61026736600461165f565b6106e5565b6040805160ff938416815292909116602083015201610150565b34801561029257600080fd5b506101436102a1366004611644565b604051606082811b6bffffffffffffffffffffffff19166020830152906034016040516020818303038152906040529050919050565b3480156102e357600080fd5b5061019a6102f2366004611644565b6001600160a01b031660009081526020819052604090205490565b6101c861031b366004611678565b610708565b34801561032c57600080fd5b5061014361094c565b34801561034157600080fd5b506101796103503660046115de565b61095b565b34801561036157600080fd5b506101c8610370366004611706565b610a10565b34801561038157600080fd5b506101796103903660046115de565b610ce1565b3480156103a157600080fd5b506103b56103b036600461165f565b610cee565b6040516001600160a01b039091168152602001610150565b3480156103d957600080fd5b5061019a6103e8366004611772565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600f8054610422906117a5565b80601f016020809104026020016040519081016040528092919081815260200182805461044e906117a5565b801561049b5780601f106104705761010080835404028352916020019161049b565b820191906000526020600020905b81548152906001019060200180831161047e57829003601f168201915b5050505050905090565b60006104b2338484610d0e565b5060015b92915050565b3360026104c8826105ce565b60ff16600c81106104db576104db6117df565b01546040516bffffffffffffffffffffffff193360601b1660208201526001600160a01b03909116919091149060340160408051601f1981840301815290829052610528916020016117f5565b6040516020818303038152906040529061055e5760405162461bcd60e51b815260040161055591906115a8565b60405180910390fd5b506105698282610edc565b5050565b600061057a843384610f9b565b61058584848461102d565b5060019392505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919061058590829086906105c9908790611877565b610d0e565b604080516bffffffffffffffffffffffff19606084901b1660208201528151601481830301815260349091019091526000908190600081518110610614576106146117df565b016020015160f81c905060005b60098160ff16101561069c5760128160ff16600d8110610643576106436117df565b015460ff9081169083161080159061067e575060128160ff16600d811061066c5761066c6117df565b015460ff610100909104811690831611155b1561068a579392505050565b806106948161188a565b915050610621565b5060405162461bcd60e51b815260206004820152601060248201527f496e76616c6964204c6f636174696f6e000000000000000000000000000000006044820152606401610555565b601281600d81106106f557600080fd5b015460ff80821692506101009091041682565b84f780156107585760405162461bcd60e51b815260206004820152601760248201527f41646472657373206973206e6f742065787465726e616c0000000000000000006044820152606401610555565b610762338661128f565b6000600261076f886105ce565b60ff16600c8110610782576107826117df565b01546001600160a01b03169050806108025760405162461bcd60e51b815260206004820152602f60248201527f546f6b656e206973206e6f7420617661696c61626c65206f6e2074686520646560448201527f7374696e6174696f6e20636861696e00000000000000000000000000000000006064820152608401610555565b60008561080f8686611877565b61081991906118a9565b905080341015610828826113f8565b60405160200161083891906118c0565b604051602081830303815290604052906108655760405162461bcd60e51b815260040161055591906115a8565b506040516001600160a01b03891660248201526044810188905260009060640160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f20e8dd930000000000000000000000000000000000000000000000000000000017815281519192506000918291829190898b8d858b81f69050896001600160a01b0316336001600160a01b03167fcf0ee562475620bbcd2f1b0675c8163317513271e4fdbbe9722436f247bd6d998b60405161093891815260200190565b60405180910390a350505050505050505050565b606060108054610422906117a5565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156109f85760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610555565b610a058286868403610d0e565b506001949350505050565b6011546001600160a01b03163314610a6a5760405162461bcd60e51b815260206004820152601660248201527f53656e646572206973206e6f74206465706c6f796572000000000000000000006044820152606401610555565b828114610adf5760405162461bcd60e51b815260206004820152603060248201527f636861696e20616e64206164647265737320617272617973206d75737420626560448201527f207468652073616d65206c656e677468000000000000000000000000000000006064820152608401610555565b60005b60ff8116841115610cda57600985858360ff16818110610b0457610b046117df565b9050602002016020810190610b199190611952565b60ff1610610b695760405162461bcd60e51b815260206004820152600b60248201527f4d61782039207a6f6e65730000000000000000000000000000000000000000006044820152606401610555565b60006002868660ff8516818110610b8257610b826117df565b9050602002016020810190610b979190611952565b60ff16600c8110610baa57610baa6117df565b01546001600160a01b031614610c285760405162461bcd60e51b815260206004820152603160248201527f54686520617070726f766564206164647265737320666f722074686973207a6f60448201527f6e6520616c7265616479206578697374730000000000000000000000000000006064820152608401610555565b82828260ff16818110610c3d57610c3d6117df565b9050602002016020810190610c529190611644565b600286868460ff16818110610c6957610c696117df565b9050602002016020810190610c7e9190611952565b60ff16600c8110610c9157610c916117df565b0180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039290921691909117905580610cd28161188a565b915050610ae2565b5050505050565b60006104b233848461102d565b600281600c8110610cfe57600080fd5b01546001600160a01b0316905081565b81f780610d835760405162461bcd60e51b815260206004820152603f60248201527f5370656e64657220616464726573732069732065787465726e616c2e2055736560448201527f2063726f73732d636861696e207472616e736665722066756e6374696f6e2e006064820152608401610555565b6001600160a01b038416610dfe5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610555565b6001600160a01b038316610e7a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610555565b6001600160a01b0384811660008181526001602090815260408083209488168084529482529182902086905590518581527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050565b6001600160a01b038216610f325760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610555565b80600e6000828254610f449190611877565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114611027578181101561101a5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610555565b6110278484848403610d0e565b50505050565b81f7806110a25760405162461bcd60e51b815260206004820152603760248201527f416464726573732069732065787465726e616c2e205573652063726f73732d6360448201527f6861696e207472616e736665722066756e6374696f6e2e0000000000000000006064820152608401610555565b6001600160a01b03841661111e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610555565b6001600160a01b03831661119a5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610555565b6001600160a01b038416600090815260208190526040902054828110156112295760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610555565b6001600160a01b03858116600081815260208181526040808320888703905593881680835291849020805488019055925186815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610cda565b6001600160a01b03821661130b5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610555565b6001600160a01b0382166000908152602081905260409020548181101561139a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610555565b6001600160a01b0383166000818152602081815260408083208686039055600e80548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b60608160000361143b57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115611465578061144f81611975565b915061145e9050600a8361198e565b915061143f565b60008167ffffffffffffffff811115611480576114806119b0565b6040519080825280601f01601f1916602001820160405280156114aa576020820181803683370190505b509050815b851561154f576114c06001826119c6565b905060006114cf600a8861198e565b6114da90600a6118a9565b6114e490886119c6565b6114ef9060306119d9565b905060008160f81b90508084848151811061150c5761150c6117df565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350611546600a8961198e565b975050506114af565b50949350505050565b60005b8381101561157357818101518382015260200161155b565b50506000910152565b60008151808452611594816020860160208601611558565b601f01601f19169290920160200192915050565b6020815260006115bb602083018461157c565b9392505050565b80356001600160a01b03811681146115d957600080fd5b919050565b600080604083850312156115f157600080fd5b6115fa836115c2565b946020939093013593505050565b60008060006060848603121561161d57600080fd5b611626846115c2565b9250611634602085016115c2565b9150604084013590509250925092565b60006020828403121561165657600080fd5b6115bb826115c2565b60006020828403121561167157600080fd5b5035919050565b600080600080600060a0868803121561169057600080fd5b611699866115c2565b97602087013597506040870135966060810135965060800135945092505050565b60008083601f8401126116cc57600080fd5b50813567ffffffffffffffff8111156116e457600080fd5b6020830191508360208260051b85010111156116ff57600080fd5b9250929050565b6000806000806040858703121561171c57600080fd5b843567ffffffffffffffff8082111561173457600080fd5b611740888389016116ba565b9096509450602087013591508082111561175957600080fd5b50611766878288016116ba565b95989497509550505050565b6000806040838503121561178557600080fd5b61178e836115c2565b915061179c602084016115c2565b90509250929050565b600181811c908216806117b957607f821691505b6020821081036117d957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b7f53656e646572200000000000000000000000000000000000000000000000000081526000825161182d816007850160208701611558565b7f206e6f7420617070726f766564000000000000000000000000000000000000006007939091019283015250601401919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156104b6576104b6611861565b600060ff821660ff81036118a0576118a0611861565b60010192915050565b80820281158282048414176104b6576104b6611861565b7f4e6f7420656e6f756768206761732073656e742c206e656564206174206c656181527f737420000000000000000000000000000000000000000000000000000000000060208201526000825161191e816023850160208701611558565b7f20776569000000000000000000000000000000000000000000000000000000006023939091019283015250602701919050565b60006020828403121561196457600080fd5b813560ff811681146115bb57600080fd5b60006001820161198757611987611861565b5060010190565b6000826119ab57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052604160045260246000fd5b818103818111156104b6576104b6611861565b60ff81811683821601908111156104b6576104b661186156fea26469706673582212204c6dd8a18c56cd6389a7fc7f0bf473d092abcc9aec3ae408859c35bbcc52713e64736f6c637822302e382e31392d646576656c6f702b636f6d6d69742e63383866343066642e6d6f640053000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000000000000000000000000000000000000000000754657374696e6700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000454495449000000000000000000000000000000000000000000000000000000004d90f003d3a429799d63fa92b4b7098f66fd98b05ab0a48f7147d7f313674627"

var testContract = ""

func TestETXSmartContract(t *testing.T) {
	client, err := ethclient.Dial(wsUrl_)
	if err != nil {
		t.Fatalf("Failed to connect to the Ethereum WebSocket client: %v", err)
	}
	defer client.Close()

	cyprus2Client, err := ethclient.Dial(wsUrlCyprus2)
	if err != nil {
		t.Fatalf("Failed to connect to the Ethereum WebSocket client: %v", err)
	}
	defer cyprus2Client.Close()

	fromAddress := common.HexToAddress(quaiAddr, location)
	privKey, err := crypto.ToECDSA(common.FromHex(quaiPrivkey))
	if err != nil {
		t.Fatalf("Failed to convert private key to ECDSA: %v", err)
	}
	from := crypto.PubkeyToAddress(privKey.PublicKey, location)
	if !from.Equal(fromAddress) {
		t.Fatalf("Failed to convert public key to address: %v", err)
	}
	// Check balance
	balance, err := client.BalanceAt(context.Background(), fromAddress.MixedcaseAddress(), nil)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	nonce, err := client.PendingNonceAt(context.Background(), fromAddress.MixedcaseAddress())
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	fmt.Printf("Balance of %s: %s nonce: %d\n", fromAddress.String(), balance.String(), nonce)

	// Deploy QXC contract with the proper address that gives me tokens in zone 0-0
	contract, err := hex.DecodeString(binary)
	if err != nil {
		fmt.Println(err.Error())
		return
	}

	signer := types.LatestSigner(PARAMS)
	toAddr := common.ZeroAddress(common.Location{0, 1})
	// Construct deployment tx
	inner_tx := types.QuaiTx{ChainID: PARAMS.ChainID, Nonce: nonce, GasTipCap: MINERTIP, GasFeeCap: MAXFEE, Gas: 5000000, To: &toAddr, Value: common.Big0, Data: contract}
	tx, err := types.SignTx(types.NewTx(&inner_tx), signer, privKey)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	gas, err := client.EstimateGas(context.Background(), interfaces.CallMsg{From: fromAddress /*To: nil, Gas: 0, GasPrice: MAXFEE, GasFeeCap: MAXFEE, GasTipCap: MINERTIP, Value: common.Big0, */, Data: contract, AccessList: inner_tx.AccessList})
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	fmt.Println("gas: ", gas)
	err = client.SendTransaction(context.Background(), tx)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	//time.Sleep(1 * time.Minute) // Wait for it to be mined
	tx, isPending, err := client.TransactionByHash(context.Background(), tx.Hash())
	fmt.Printf("tx: %+v isPending: %v err: %v\n", tx, isPending, err)
	receipt, err := client.TransactionReceipt(context.Background(), tx.Hash())
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	fmt.Printf("Receipt: %+v\n", receipt)

	etx := receipt.Etxs[0]
	tx, isPending, err = cyprus2Client.TransactionByHash(context.Background(), etx.Hash())
	if err != nil {
		fmt.Println(err.Error())
	}
	fmt.Printf("etx: %+v isPending: %v err: %v\n", tx, isPending, err)
	receipt, err = cyprus2Client.TransactionReceipt(context.Background(), etx.Hash())
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	fmt.Printf("ETX Receipt: %+v\n", receipt)
	contractAddr := receipt.ContractAddress
	// Check balance in zone 0-1
	sig := crypto.Keccak256([]byte("balanceOf(address)"))[:4]
	data := make([]byte, 0, 0)
	data = append(data, sig...)
	from_, err := uint256.FromHex(from.Hex())
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	temp := from_.Bytes32()
	data = append(data, temp[:]...)

	data, err = cyprus2Client.CallContract(context.Background(), interfaces.CallMsg{To: &contractAddr, Data: data}, nil)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	fmt.Printf("Balance of %s: %s\n", toAddr.String(), new(big.Int).SetBytes(data).String())

}

func TestSmartContract(t *testing.T) {
	inner__tx := types.QuaiTx{ChainID: PARAMS.ChainID, Nonce: 0, GasTipCap: big.NewInt(0), GasFeeCap: big.NewInt(0), Gas: 0, To: nil, Value: common.Big0, Data: []byte{}, V: big.NewInt(0), R: big.NewInt(0), S: big.NewInt(0)}
	signer := types.LatestSigner(PARAMS)
	privKey_, err := crypto.ToECDSA(common.FromHex(quaiPrivkey))
	if err != nil {
		t.Fatalf("Failed to convert private key to ECDSA: %v", err)
	}
	tx_, err := types.SignTx(types.NewTx(&inner__tx), signer, privKey_)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	v, r, s := tx_.GetEcdsaSignatureValues()
	fmt.Printf("V: %+v R: %+v, S: %+v", v.Bytes(), r.Bytes(), s.Bytes())
	protoTx_, err := tx_.ProtoEncode()
	if err != nil {
		log.Fatal(err)
	}
	bytes, err := proto.Marshal(protoTx_)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Printf("%+v\n", bytes)
	protoTx_ = &types.ProtoTransaction{}
	proto.Unmarshal(bytes, protoTx_)
	newTx := types.Transaction{}
	newTx.ProtoDecode(protoTx_, location)

	client, err := ethclient.Dial(wsUrl_)
	if err != nil {
		t.Fatalf("Failed to connect to the Ethereum WebSocket client: %v", err)
	}
	defer client.Close()
	err = client.SendTransaction(context.Background(), tx_)
	if err != nil {
		fmt.Println(err.Error())
		return
	}

	fromAddress := common.HexToAddress(quaiAddr, location)
	privKey, err := crypto.ToECDSA(common.FromHex(quaiPrivkey))
	if err != nil {
		t.Fatalf("Failed to convert private key to ECDSA: %v", err)
	}
	from := crypto.PubkeyToAddress(privKey.PublicKey, location)
	if !from.Equal(fromAddress) {
		t.Fatalf("Failed to convert public key to address: %v", err)
	}
	// Check balance
	balance, err := client.BalanceAt(context.Background(), fromAddress.MixedcaseAddress(), nil)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	nonce, err := client.PendingNonceAt(context.Background(), fromAddress.MixedcaseAddress())
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	fmt.Printf("Balance of %s: %s nonce: %d\n", fromAddress.String(), balance.String(), nonce)

	// Deploy QXC contract with the proper address that gives me tokens in zone 0-0
	contract, err := hex.DecodeString(testContract)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	i := uint8(0)
	j := uint8(0)
	contract = append(contract, i)
	contract = append(contract, j)
	var contractAddr common.Address
	// Grind contract address
grind:
	for {
		contract[len(contract)-2] = i
		for j = 0; j < 255; j++ {
			contract[len(contract)-1] = j
			contractAddr = crypto.CreateAddress(fromAddress, nonce, contract, location)
			if common.IsInChainScope(contractAddr.Bytes(), location) && contractAddr.IsInQuaiLedgerScope() {
				break grind
			}
		}
		i++
	}
	fmt.Println("Contract address: ", contractAddr.String())
	fmt.Println("Took ", (i+1)*(j+1), " iterations to find contract address")

	// Construct deployment tx
	inner_tx := types.QuaiTx{ChainID: PARAMS.ChainID, Nonce: nonce, GasTipCap: MINERTIP, GasFeeCap: MAXFEE, Gas: 5000000, To: nil, Value: common.Big0, Data: contract}
	tx, err := types.SignTx(types.NewTx(&inner_tx), signer, privKey)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	gas, err := client.EstimateGas(context.Background(), interfaces.CallMsg{From: fromAddress /*To: nil, Gas: 0, GasPrice: MAXFEE, GasFeeCap: MAXFEE, GasTipCap: MINERTIP, Value: common.Big0, */, Data: contract, AccessList: inner_tx.AccessList})
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	fmt.Println("gas: ", gas)
	protoTx, err := tx.ProtoEncode()
	if err != nil {
		return
	}
	data, err := proto.Marshal(protoTx)
	if err != nil {
		return
	}
	fmt.Printf("%+v\n", data)
	err = client.SendTransaction(context.Background(), tx)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	fmt.Println("tx: ", tx.Hash().String())
	fmt.Println(crypto.Keccak256(data))
	fmt.Println("tx value: ", tx.Value().String())
	//time.Sleep(5 * time.Second) // Wait for it to be mined
	newtx, isPending, err := client.TransactionByHash(context.Background(), tx.Hash())
	fmt.Println("newtx value: ", newtx.Value().String())
	newProtoTx, err := newtx.ProtoEncode()
	if err != nil {
		return
	}
	data_, err := proto.Marshal(newProtoTx)
	if err != nil {
		return
	}
	fmt.Printf("%+v\n", data_)
	fmt.Println("tx: ", newtx.Hash().String())
	fmt.Printf("tx: %+v isPending: %v err: %v\n", tx, isPending, err)
	receipt, err := client.TransactionReceipt(context.Background(), tx.Hash())
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	fmt.Printf("Receipt: %+v\n", receipt)
	contractAddr = receipt.ContractAddress

	// Check balance in zone 0-0
	sig := crypto.Keccak256([]byte("testSha()"))[:4]
	data = make([]byte, 0, 0)
	data = append(data, sig...)
	/*from_, err := uint256.FromHex(fromAddress.Hex())
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	temp := from_.Bytes32()
	data = append(data, temp[:]...)*/

	data, err = client.CallContract(context.Background(), interfaces.CallMsg{To: &contractAddr, Data: data}, nil)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	fmt.Printf("Balance of %s: %s\n", fromAddress.String(), new(big.Int).SetBytes(data).String())

}

func TestGetBalance(t *testing.T) {
	wsClientCyprus1, err := ethclient.Dial(wsUrl_)
	if err != nil {
		t.Fatalf("Failed to connect to the Ethereum WebSocket client: %v", err)
	}
	defer wsClientCyprus1.Close()

	balance, err := wsClientCyprus1.BalanceAt(context.Background(), common.HexToAddress("0x000D8BfADBF40241101c430D25151D893c6b16D8", common.Location{0, 0}).MixedcaseAddress(), nil)
	if err != nil {
		t.Error(err.Error())
		t.Fail()
	}
	t.Log(balance)

	wsClientCyprus2, err := ethclient.Dial(wsUrlCyprus2)
	if err != nil {
		t.Fatalf("Failed to connect to the Ethereum WebSocket client: %v", err)
	}
	defer wsClientCyprus2.Close()

	balance, err = wsClientCyprus2.BalanceAt(context.Background(), common.HexToAddress("0x0109E949aF137F98bb6AF72102b9fE5C3d7e17cc", common.Location{0, 1}).MixedcaseAddress(), nil)
	if err != nil {
		t.Error(err.Error())
		t.Fail()
	}
	t.Log(balance)
}

/*func TestQiLedgerScope(t *testing.T) {

	address := common.FromHex("0x010978987B569072744dc9426E76590eb6fCfE8B")
	if !common.IsInQiLedgerScope(common.AddressBytes(address)) {
		t.Fail()
	}
	t.Log("Yes")

}*/

func getAggSig_(privKeys []*secp256k1.PrivateKey, pubKeys []*secp256k1.PublicKey, txHash [32]byte) (*schnorr.Signature, error) {
	keys := make([]*btcec.PrivateKey, len(privKeys))
	copy(keys, privKeys)

	signSet := make([]*btcec.PublicKey, len(pubKeys))
	copy(signSet, pubKeys)

	var combinedKey *btcec.PublicKey
	var ctxOpts []musig2.ContextOption

	ctxOpts = append(ctxOpts, musig2.WithKnownSigners(signSet))

	// Now that we have all the signers, we'll make a new context, then
	// generate a new session for each of them(which handles nonce
	// generation).
	signers := make([]*musig2.Session, len(keys))
	for i, signerKey := range keys {
		signCtx, err := musig2.NewContext(
			signerKey, false, ctxOpts...,
		)
		if err != nil {
			log.Fatalf("unable to generate context: %v", err)
		}

		if combinedKey == nil {
			combinedKey, err = signCtx.CombinedKey()
			if err != nil {
				log.Fatalf("combined key not available: %v", err)
			}
		}

		session, err := signCtx.NewSession()
		if err != nil {
			log.Fatalf("unable to generate new session: %v", err)
		}
		signers[i] = session
	}

	// Next, in the pre-signing phase, we'll send all the nonces to each
	// signer.
	var wg sync.WaitGroup
	for i, signCtx := range signers {
		signCtx := signCtx

		wg.Add(1)
		go func(idx int, signer *musig2.Session) {
			defer wg.Done()

			for j, otherCtx := range signers {
				if idx == j {
					continue
				}

				nonce := otherCtx.PublicNonce()
				haveAll, err := signer.RegisterPubNonce(nonce)
				if err != nil {
					log.Fatalf("unable to add public nonce")
				}

				if j == len(signers)-1 && !haveAll {
					log.Fatalf("all public nonces should have been detected")
				}
			}
		}(i, signCtx)
	}

	wg.Wait()

	// In the final step, we'll use the first signer as our combiner, and
	// generate a signature for each signer, and then accumulate that with
	// the combiner.
	combiner := signers[0]
	for i := range signers {
		signer := signers[i]
		partialSig, err := signer.Sign(txHash)
		if err != nil {
			log.Fatalf("unable to generate partial sig: %v", err)
		}

		// We don't need to combine the signature for the very first
		// signer, as it already has that partial signature.
		if i != 0 {
			haveAll, err := combiner.CombineSig(partialSig)
			if err != nil {
				log.Fatalf("unable to combine sigs: %v", err)
			}

			if i == len(signers)-1 && !haveAll {
				log.Fatalf("final sig wasn't reconstructed")
			}
		}
	}

	aggKey, _, _, _ := musig2.AggregateKeys(
		signSet, false,
	)

	if !aggKey.FinalKey.IsEqual(combinedKey) {
		log.Fatalf("aggKey is invalid!")
	}

	// Finally we'll combined all the nonces, and ensure that it validates
	// as a single schnorr signature.
	finalSig := combiner.FinalSig()
	if !finalSig.Verify(txHash[:], combinedKey) {
		log.Fatalf("final sig is invalid!")
	}

	return finalSig, nil
}
